# Market Entry Point

# Add ticket to pool, add preferences to the ticket, activate it (announce to market matchers )
# Match Makers then commit sealed bids, which are revealed in the reveal window
# Buyer and Seller then accept the trade offer

# extern xorll.se: [insert:[int256,int256,int256,int256]:int256, np:[int256]:int256, test:[]:_, traverse:[int256]:_]
inset('xorll.se')

# maybe instead of state, have different linked lists for each stage?
data offers[2**256](owner, hash)
data offer

data pool[2**256](owner, epoch, state, preferences(head, tail), insurances[])
data ticket  # auto increment


# preferences include; (only allow preferences to be added in same block number as created)
# price
# quantity
# item
# dispute contract address


def init():
    self.ticket = 0
    self.offer = 0
    self.xorll_addr = 1 # referenced in xorll.se, can't be 0


def shared():
    # block offsets from ticket epoch
    SEALED_WINDOW = 1   # to accept sealed bids
    REVEAL_WINDOW = 2   # in which sealed bids can be revealed


def add():
    ticket = self.ticket
    self.ticket = self.ticket + 1

    self.pool[ticket].owner = msg.sender
    self.pool[ticket].epoch = block.number
    self.pool[ticket].state = 0  # inactive

    # Preferences
    # Head pointer
    # TODO: Maybe insert returns np and key, maybe also use autoincrement
    # TODO: remove head tail xorll preamble
    # TODO: store tail_np, then if self.pool[ticket].preferences.head == 0 
    #       in insert method, take tail_np and head, then set as head.
    #       then do tail on next insert.
    head = self.insert("head", 10+ticket, 0, 0)
    self.pool[ticket].preferences.head = head
    # Tail pointer
    self.pool[ticket].preferences.tail = self.insert("tail", 20, 0, head)
    # TODO: insurance references
    return(ticket)


def add_preference(ticket, key, value):
    # only allow owner(trader) to add preferences in same block it was created while inactive
    if msg.sender == self.pool[ticket].owner and self.pool[ticket].state == 0 and self.pool[ticket].epoch == block.number:
        tail = self.pool[ticket].preferences.tail
        # or make tail() return np in insert as well?
        tail_np = self.np(tail)
        tail = self.insert(key, value, tail_np, tail)
        self.pool[ticket].preferences.tail = tail


# make ticket available for match maker to produce trade offers
# after QUIET_WINDOW + REVEAL_WINDOW, trade offers presented to buyer,
# TODO: how should trade offers should be attached?
# if buyer chooses them, confirm with seller, if seller declines penalize them?
# if seller confirms, trade is created

# maybe match maker fee should be taken as the margin, since bid and ask price are preferences of seller
def activate(ticket):
    # record block number, and start QUIET_WINDOW
    if msg.sender == self.pool[ticket].owner and self.pool[ticket].state == 0:
        self.pool[ticket].state = 1  # active
        log(ticket, 1)  # log this bid as being active for match makers


# assumes trader will deactive their own bid once they accept a trade offer
def deactivate(ticket):
    # check if trade offers have been declined or not?
    if msg.sender == self.pool[ticket].owner and self.pool[ticket].state == 1:
        # delete the entire entry if possible
        self.pool[bidkey].state = -1  # non existant


def get_preferences(ticket):
    self.traverse(self.pool[ticket].preferences.head)


def add_sealed_offer(buy_ticket, hash):
    # TODO, make sure not in REVEAL_WINDOW
    epoch = self.pool[buy_ticket].epoch

    # Impossible, Offer cannot be made before ticket
    if epoch < block.number:
        return(-1)

    window = block.number - epoch

    # abort if buy ticket no longer taking offers
    if window > SEALED_WINDOW:
        return(-1)

    key = self.offer
    self.offer = self.offer + 1

    # Add Trade Offer
    self.offers[key].owner = msg.sender
    self.offers[key].hash = hash

    return(key)

# def reveal_offer(offer_id):
#     # check sha of offer

# def accept_offer(offer_id):
#     # within accept blockchain number bounds
#     # if other has accepted, create trade contract?


# TODO: Remove from storage
# macro delete_blah(i):
#      x = ref(blah[i].bar)
#      while x < ref(blah[i + 1].bar):
#           ~sstore(x, 0)
#           x += 1