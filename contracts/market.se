# Market Entry Point

# Add ticket to pool, add preferences to the ticket, activate it (announce to market matchers )
# Match Makers then commit sealed bids, which are revealed in the reveal window 
# Buyer and Seller then accept the trade offer

extern xorll.se: [insert:[int256,int256,int256,int256]:int256, np:[int256]:int256, test:[]:_, traverse:[int256]:_]

monkey = create('xorll.se')
preferences = create('xorll.se')

# maybe instead of state, have different linked lists for each stage?
data trade_offers[]
data pool[](owner, epoch, state, preferences[], insurances[])
data ticket # auto increment


# preferences include; (only allow preferences to be added in same block number as created)
# price
# quantity
# item
# dispute contract address


def init():
    ticket = 0


def shared():
    # block offsets from ticket epoch
    QUIET_WINDOW = 1   # to accept sealed bids
    REVEAL_WINDOW = 2  # in which sealed bids can be revealed


def add():
    # not ideal, only one bid per block per sender
    key = ticket
    ticket = ticket + 1

    self.pool[key].owner = msg.sender
    self.pool[key].epoch = block.number
    self.pool[key].state = 0  # inactive

    # Preferences
    # Head pointer
    # TODO: Maybe insert returns np and key, maybe also use autoincrement
    head = preferences.insert("head", 0, 0, 0)
    self.pool[key].preferences[0] = head
    # Tail pointer
    self.pool[key].preferences[1] = preferences.insert("tail", 0, 0, tail)

    # TODO: insurance references

    return(key)


def add_preference(ticket, key, value):
    # only allow owner(trader) to add preferences in same block it was created while inactive
    if msg.sender == self.pool[ticket].owner and self.pool[ticket].state == 0 and self.pool[ticket].epoch == block.number:
        tail = self.pool[ticket].preferences[1]
        # or make tail() return np in insert as well?
        tail_np = preferences.np(tail)
        tail = preferences.insert(key, value, tail_np, tail)
        self.pool[ticket].preferences[1] = tail


# make ticket available for match maker to produce trade offers
# after QUIET_WINDOW + REVEAL_WINDOW, trade offers presented to buyer,
# TODO: how should trade offers should be attached?
# if buyer chooses them, confirm with seller, if seller declines penalize them?
# if seller confirms, trade is created

# maybe match maker fee should be taken as the margin, since bid and ask price are preferences of seller
def activate(ticket):
    # record block number, and start QUIET_WINDOW
    if msg.sender == self.pool[ticket].owner and self.pool[ticket].state == 0:
        self.pool[ticket].state = 1  # active
        log(ticket, 1) # log this bid as being active for match makers


# assumes trader will deactive their own bid once they accept a trade offer
def deactivate(ticket):
    # check if trade offers have been declined or not?
    if msg.sender == self.pool[ticket].owner and self.pool[ticket].state == 1:
        # delete the entire entry if possible
        self.pool[bidkey].state = -1  # non existant


# TODO: Remove from storage
# macro delete_blah(i):
#      x = ref(blah[i].bar)
#      while x < ref(blah[i + 1].bar):
#           ~sstore(x, 0)
#           x += 1